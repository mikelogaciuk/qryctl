#!/usr/bin/env ruby
require 'bundler/setup'
require 'dry/cli'
require 'sequel'
require 'json'
require 'yaml'
require 'tiny_tds'
require 'logger'

module Qryctl
  module CLI
    module Commands
      extend Dry::CLI::Registry

      class Version < Dry::CLI::Command
        desc 'Print version'

        def call(*)
          puts '0.1.0'
        end
      end

      class Get < Dry::CLI::Command
        desc 'Query the database'

        argument :server, required: true, desc: 'The server to connect to'
        argument :database, required: true, desc: 'The database to connect to'
        argument :query, required: true, desc: 'The query to run'
        option :format, default: 'table', values: %w[json table], desc: 'The output format'

        def call(server:, database:, query:, format: 'table', **)
          db = Sequel.connect(
            adapter: 'tinytds',
            host: server,
            database: database,
            user: '',
            password: ''
          )

          forbidden = %w[delete drop truncate update]

          if forbidden.any? { |word| query.downcase.include?(word) }
            (puts 'Error: Forbidden query')
          else
            query = query.strip

            (
              begin
                result = []

                db[query].all do |row|
                  row.each do |key, value|
                    row[key] = value.to_f if value.is_a?(BigDecimal)
                  end

                  result << row
                end

                db.disconnect

                case format
                when 'json'
                  puts JSON.pretty_generate(result)
                when 'table'
                  require 'table_print'

                  tp result
                end
              rescue StandardError => e
                puts "Error: #{e.message}"

                db.disconnect
              ensure
                db.disconnect
              end)

          end
        end
      end

      register 'version', Version, aliases: %w[v -v --version]
      register 'get', Get, aliases: %w[q -g --get]
    end
  end
end

Dry::CLI.new(Qryctl::CLI::Commands).call
